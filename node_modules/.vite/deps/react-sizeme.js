import {
  require_react_dom
} from "./chunk-FXQPI6ME.js";
import {
  require_react
} from "./chunk-ZGRSIX2Q.js";
import {
  __commonJS
} from "./chunk-ROME4SDB.js";

// node_modules/invariant/browser.js
var require_browser = __commonJS({
  "node_modules/invariant/browser.js"(exports, module) {
    "use strict";
    var invariant = function(condition, format, a, b, c, d, e, f) {
      if (true) {
        if (format === void 0) {
          throw new Error("invariant requires an error message argument");
        }
      }
      if (!condition) {
        var error;
        if (format === void 0) {
          error = new Error(
            "Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings."
          );
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(
            format.replace(/%s/g, function() {
              return args[argIndex++];
            })
          );
          error.name = "Invariant Violation";
        }
        error.framesToPop = 1;
        throw error;
      }
    };
    module.exports = invariant;
  }
});

// node_modules/throttle-debounce/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/throttle-debounce/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function throttle(delay, noTrailing, callback, debounceMode) {
      var timeoutID;
      var cancelled = false;
      var lastExec = 0;
      function clearExistingTimeout() {
        if (timeoutID) {
          clearTimeout(timeoutID);
        }
      }
      function cancel() {
        clearExistingTimeout();
        cancelled = true;
      }
      if (typeof noTrailing !== "boolean") {
        debounceMode = callback;
        callback = noTrailing;
        noTrailing = void 0;
      }
      function wrapper() {
        for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {
          arguments_[_key] = arguments[_key];
        }
        var self = this;
        var elapsed = Date.now() - lastExec;
        if (cancelled) {
          return;
        }
        function exec() {
          lastExec = Date.now();
          callback.apply(self, arguments_);
        }
        function clear() {
          timeoutID = void 0;
        }
        if (debounceMode && !timeoutID) {
          exec();
        }
        clearExistingTimeout();
        if (debounceMode === void 0 && elapsed > delay) {
          exec();
        } else if (noTrailing !== true) {
          timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === void 0 ? delay - elapsed : delay);
        }
      }
      wrapper.cancel = cancel;
      return wrapper;
    }
    function debounce(delay, atBegin, callback) {
      return callback === void 0 ? throttle(delay, atBegin, false) : throttle(delay, callback, atBegin !== false);
    }
    exports.debounce = debounce;
    exports.throttle = throttle;
  }
});

// node_modules/element-resize-detector/src/collection-utils.js
var require_collection_utils = __commonJS({
  "node_modules/element-resize-detector/src/collection-utils.js"(exports, module) {
    "use strict";
    var utils = module.exports = {};
    utils.forEach = function(collection, callback) {
      for (var i = 0; i < collection.length; i++) {
        var result = callback(collection[i]);
        if (result) {
          return result;
        }
      }
    };
  }
});

// node_modules/element-resize-detector/src/element-utils.js
var require_element_utils = __commonJS({
  "node_modules/element-resize-detector/src/element-utils.js"(exports, module) {
    "use strict";
    module.exports = function(options) {
      var getState = options.stateHandler.getState;
      function isDetectable(element) {
        var state = getState(element);
        return state && !!state.isDetectable;
      }
      function markAsDetectable(element) {
        getState(element).isDetectable = true;
      }
      function isBusy(element) {
        return !!getState(element).busy;
      }
      function markBusy(element, busy) {
        getState(element).busy = !!busy;
      }
      return {
        isDetectable,
        markAsDetectable,
        isBusy,
        markBusy
      };
    };
  }
});

// node_modules/element-resize-detector/src/listener-handler.js
var require_listener_handler = __commonJS({
  "node_modules/element-resize-detector/src/listener-handler.js"(exports, module) {
    "use strict";
    module.exports = function(idHandler) {
      var eventListeners = {};
      function getListeners(element) {
        var id = idHandler.get(element);
        if (id === void 0) {
          return [];
        }
        return eventListeners[id] || [];
      }
      function addListener(element, listener) {
        var id = idHandler.get(element);
        if (!eventListeners[id]) {
          eventListeners[id] = [];
        }
        eventListeners[id].push(listener);
      }
      function removeListener(element, listener) {
        var listeners = getListeners(element);
        for (var i = 0, len = listeners.length; i < len; ++i) {
          if (listeners[i] === listener) {
            listeners.splice(i, 1);
            break;
          }
        }
      }
      function removeAllListeners(element) {
        var listeners = getListeners(element);
        if (!listeners) {
          return;
        }
        listeners.length = 0;
      }
      return {
        get: getListeners,
        add: addListener,
        removeListener,
        removeAllListeners
      };
    };
  }
});

// node_modules/element-resize-detector/src/id-generator.js
var require_id_generator = __commonJS({
  "node_modules/element-resize-detector/src/id-generator.js"(exports, module) {
    "use strict";
    module.exports = function() {
      var idCount = 1;
      function generate() {
        return idCount++;
      }
      return {
        generate
      };
    };
  }
});

// node_modules/element-resize-detector/src/id-handler.js
var require_id_handler = __commonJS({
  "node_modules/element-resize-detector/src/id-handler.js"(exports, module) {
    "use strict";
    module.exports = function(options) {
      var idGenerator = options.idGenerator;
      var getState = options.stateHandler.getState;
      function getId(element) {
        var state = getState(element);
        if (state && state.id !== void 0) {
          return state.id;
        }
        return null;
      }
      function setId(element) {
        var state = getState(element);
        if (!state) {
          throw new Error("setId required the element to have a resize detection state.");
        }
        var id = idGenerator.generate();
        state.id = id;
        return id;
      }
      return {
        get: getId,
        set: setId
      };
    };
  }
});

// node_modules/element-resize-detector/src/reporter.js
var require_reporter = __commonJS({
  "node_modules/element-resize-detector/src/reporter.js"(exports, module) {
    "use strict";
    module.exports = function(quiet) {
      function noop() {
      }
      var reporter = {
        log: noop,
        warn: noop,
        error: noop
      };
      if (!quiet && window.console) {
        var attachFunction = function(reporter2, name) {
          reporter2[name] = function reporterProxy() {
            var f = console[name];
            if (f.apply) {
              f.apply(console, arguments);
            } else {
              for (var i = 0; i < arguments.length; i++) {
                f(arguments[i]);
              }
            }
          };
        };
        attachFunction(reporter, "log");
        attachFunction(reporter, "warn");
        attachFunction(reporter, "error");
      }
      return reporter;
    };
  }
});

// node_modules/element-resize-detector/src/browser-detector.js
var require_browser_detector = __commonJS({
  "node_modules/element-resize-detector/src/browser-detector.js"(exports, module) {
    "use strict";
    var detector = module.exports = {};
    detector.isIE = function(version) {
      function isAnyIeVersion() {
        var agent = navigator.userAgent.toLowerCase();
        return agent.indexOf("msie") !== -1 || agent.indexOf("trident") !== -1 || agent.indexOf(" edge/") !== -1;
      }
      if (!isAnyIeVersion()) {
        return false;
      }
      if (!version) {
        return true;
      }
      var ieVersion = function() {
        var undef, v = 3, div = document.createElement("div"), all = div.getElementsByTagName("i");
        do {
          div.innerHTML = "<!--[if gt IE " + ++v + "]><i></i><![endif]-->";
        } while (all[0]);
        return v > 4 ? v : undef;
      }();
      return version === ieVersion;
    };
    detector.isLegacyOpera = function() {
      return !!window.opera;
    };
  }
});

// node_modules/batch-processor/src/utils.js
var require_utils = __commonJS({
  "node_modules/batch-processor/src/utils.js"(exports, module) {
    "use strict";
    var utils = module.exports = {};
    utils.getOption = getOption;
    function getOption(options, name, defaultValue) {
      var value = options[name];
      if ((value === void 0 || value === null) && defaultValue !== void 0) {
        return defaultValue;
      }
      return value;
    }
  }
});

// node_modules/batch-processor/src/batch-processor.js
var require_batch_processor = __commonJS({
  "node_modules/batch-processor/src/batch-processor.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = function batchProcessorMaker(options) {
      options = options || {};
      var reporter = options.reporter;
      var asyncProcess = utils.getOption(options, "async", true);
      var autoProcess = utils.getOption(options, "auto", true);
      if (autoProcess && !asyncProcess) {
        reporter && reporter.warn("Invalid options combination. auto=true and async=false is invalid. Setting async=true.");
        asyncProcess = true;
      }
      var batch = Batch();
      var asyncFrameHandler;
      var isProcessing = false;
      function addFunction(level, fn) {
        if (!isProcessing && autoProcess && asyncProcess && batch.size() === 0) {
          processBatchAsync();
        }
        batch.add(level, fn);
      }
      function processBatch() {
        isProcessing = true;
        while (batch.size()) {
          var processingBatch = batch;
          batch = Batch();
          processingBatch.process();
        }
        isProcessing = false;
      }
      function forceProcessBatch(localAsyncProcess) {
        if (isProcessing) {
          return;
        }
        if (localAsyncProcess === void 0) {
          localAsyncProcess = asyncProcess;
        }
        if (asyncFrameHandler) {
          cancelFrame(asyncFrameHandler);
          asyncFrameHandler = null;
        }
        if (localAsyncProcess) {
          processBatchAsync();
        } else {
          processBatch();
        }
      }
      function processBatchAsync() {
        asyncFrameHandler = requestFrame(processBatch);
      }
      function clearBatch() {
        batch = {};
        batchSize = 0;
        topLevel = 0;
        bottomLevel = 0;
      }
      function cancelFrame(listener) {
        var cancel = clearTimeout;
        return cancel(listener);
      }
      function requestFrame(callback) {
        var raf = function(fn) {
          return setTimeout(fn, 0);
        };
        return raf(callback);
      }
      return {
        add: addFunction,
        force: forceProcessBatch
      };
    };
    function Batch() {
      var batch = {};
      var size = 0;
      var topLevel2 = 0;
      var bottomLevel2 = 0;
      function add(level, fn) {
        if (!fn) {
          fn = level;
          level = 0;
        }
        if (level > topLevel2) {
          topLevel2 = level;
        } else if (level < bottomLevel2) {
          bottomLevel2 = level;
        }
        if (!batch[level]) {
          batch[level] = [];
        }
        batch[level].push(fn);
        size++;
      }
      function process2() {
        for (var level = bottomLevel2; level <= topLevel2; level++) {
          var fns = batch[level];
          for (var i = 0; i < fns.length; i++) {
            var fn = fns[i];
            fn();
          }
        }
      }
      function getSize() {
        return size;
      }
      return {
        add,
        process: process2,
        size: getSize
      };
    }
  }
});

// node_modules/element-resize-detector/src/state-handler.js
var require_state_handler = __commonJS({
  "node_modules/element-resize-detector/src/state-handler.js"(exports, module) {
    "use strict";
    var prop = "_erd";
    function initState(element) {
      element[prop] = {};
      return getState(element);
    }
    function getState(element) {
      return element[prop];
    }
    function cleanState(element) {
      delete element[prop];
    }
    module.exports = {
      initState,
      getState,
      cleanState
    };
  }
});

// node_modules/element-resize-detector/src/detection-strategy/object.js
var require_object = __commonJS({
  "node_modules/element-resize-detector/src/detection-strategy/object.js"(exports, module) {
    "use strict";
    var browserDetector = require_browser_detector();
    module.exports = function(options) {
      options = options || {};
      var reporter = options.reporter;
      var batchProcessor = options.batchProcessor;
      var getState = options.stateHandler.getState;
      if (!reporter) {
        throw new Error("Missing required dependency: reporter.");
      }
      function addListener(element, listener) {
        function listenerProxy() {
          listener(element);
        }
        if (browserDetector.isIE(8)) {
          getState(element).object = {
            proxy: listenerProxy
          };
          element.attachEvent("onresize", listenerProxy);
        } else {
          var object = getObject(element);
          if (!object) {
            throw new Error("Element is not detectable by this strategy.");
          }
          object.contentDocument.defaultView.addEventListener("resize", listenerProxy);
        }
      }
      function buildCssTextString(rules) {
        var seperator = options.important ? " !important; " : "; ";
        return (rules.join(seperator) + seperator).trim();
      }
      function makeDetectable(options2, element, callback) {
        if (!callback) {
          callback = element;
          element = options2;
          options2 = null;
        }
        options2 = options2 || {};
        var debug = options2.debug;
        function injectObject(element2, callback2) {
          var OBJECT_STYLE = buildCssTextString(["display: block", "position: absolute", "top: 0", "left: 0", "width: 100%", "height: 100%", "border: none", "padding: 0", "margin: 0", "opacity: 0", "z-index: -1000", "pointer-events: none"]);
          var positionCheckPerformed = false;
          var style = window.getComputedStyle(element2);
          var width = element2.offsetWidth;
          var height = element2.offsetHeight;
          getState(element2).startSize = {
            width,
            height
          };
          function mutateDom() {
            function alterPositionStyles() {
              if (style.position === "static") {
                element2.style.setProperty("position", "relative", options2.important ? "important" : "");
                var removeRelativeStyles = function(reporter2, element3, style2, property) {
                  function getNumericalValue(value2) {
                    return value2.replace(/[^-\d\.]/g, "");
                  }
                  var value = style2[property];
                  if (value !== "auto" && getNumericalValue(value) !== "0") {
                    reporter2.warn("An element that is positioned static has style." + property + "=" + value + " which is ignored due to the static positioning. The element will need to be positioned relative, so the style." + property + " will be set to 0. Element: ", element3);
                    element3.style.setProperty(property, "0", options2.important ? "important" : "");
                  }
                };
                removeRelativeStyles(reporter, element2, style, "top");
                removeRelativeStyles(reporter, element2, style, "right");
                removeRelativeStyles(reporter, element2, style, "bottom");
                removeRelativeStyles(reporter, element2, style, "left");
              }
            }
            function onObjectLoad() {
              if (!positionCheckPerformed) {
                alterPositionStyles();
              }
              function getDocument(element3, callback3) {
                if (!element3.contentDocument) {
                  var state = getState(element3);
                  if (state.checkForObjectDocumentTimeoutId) {
                    window.clearTimeout(state.checkForObjectDocumentTimeoutId);
                  }
                  state.checkForObjectDocumentTimeoutId = setTimeout(function checkForObjectDocument() {
                    state.checkForObjectDocumentTimeoutId = 0;
                    getDocument(element3, callback3);
                  }, 100);
                  return;
                }
                callback3(element3.contentDocument);
              }
              var objectElement = this;
              getDocument(objectElement, function onObjectDocumentReady(objectDocument) {
                callback2(element2);
              });
            }
            if (style.position !== "") {
              alterPositionStyles(style);
              positionCheckPerformed = true;
            }
            var object = document.createElement("object");
            object.style.cssText = OBJECT_STYLE;
            object.tabIndex = -1;
            object.type = "text/html";
            object.setAttribute("aria-hidden", "true");
            object.onload = onObjectLoad;
            if (!browserDetector.isIE()) {
              object.data = "about:blank";
            }
            if (!getState(element2)) {
              return;
            }
            element2.appendChild(object);
            getState(element2).object = object;
            if (browserDetector.isIE()) {
              object.data = "about:blank";
            }
          }
          if (batchProcessor) {
            batchProcessor.add(mutateDom);
          } else {
            mutateDom();
          }
        }
        if (browserDetector.isIE(8)) {
          callback(element);
        } else {
          injectObject(element, callback);
        }
      }
      function getObject(element) {
        return getState(element).object;
      }
      function uninstall(element) {
        if (!getState(element)) {
          return;
        }
        var object = getObject(element);
        if (!object) {
          return;
        }
        if (browserDetector.isIE(8)) {
          element.detachEvent("onresize", object.proxy);
        } else {
          element.removeChild(object);
        }
        if (getState(element).checkForObjectDocumentTimeoutId) {
          window.clearTimeout(getState(element).checkForObjectDocumentTimeoutId);
        }
        delete getState(element).object;
      }
      return {
        makeDetectable,
        addListener,
        uninstall
      };
    };
  }
});

// node_modules/element-resize-detector/src/detection-strategy/scroll.js
var require_scroll = __commonJS({
  "node_modules/element-resize-detector/src/detection-strategy/scroll.js"(exports, module) {
    "use strict";
    var forEach = require_collection_utils().forEach;
    module.exports = function(options) {
      options = options || {};
      var reporter = options.reporter;
      var batchProcessor = options.batchProcessor;
      var getState = options.stateHandler.getState;
      var hasState = options.stateHandler.hasState;
      var idHandler = options.idHandler;
      if (!batchProcessor) {
        throw new Error("Missing required dependency: batchProcessor");
      }
      if (!reporter) {
        throw new Error("Missing required dependency: reporter.");
      }
      var scrollbarSizes = getScrollbarSizes();
      var styleId = "erd_scroll_detection_scrollbar_style";
      var detectionContainerClass = "erd_scroll_detection_container";
      function initDocument(targetDocument) {
        injectScrollStyle(targetDocument, styleId, detectionContainerClass);
      }
      initDocument(window.document);
      function buildCssTextString(rules) {
        var seperator = options.important ? " !important; " : "; ";
        return (rules.join(seperator) + seperator).trim();
      }
      function getScrollbarSizes() {
        var width = 500;
        var height = 500;
        var child = document.createElement("div");
        child.style.cssText = buildCssTextString(["position: absolute", "width: " + width * 2 + "px", "height: " + height * 2 + "px", "visibility: hidden", "margin: 0", "padding: 0"]);
        var container = document.createElement("div");
        container.style.cssText = buildCssTextString(["position: absolute", "width: " + width + "px", "height: " + height + "px", "overflow: scroll", "visibility: none", "top: " + -width * 3 + "px", "left: " + -height * 3 + "px", "visibility: hidden", "margin: 0", "padding: 0"]);
        container.appendChild(child);
        document.body.insertBefore(container, document.body.firstChild);
        var widthSize = width - container.clientWidth;
        var heightSize = height - container.clientHeight;
        document.body.removeChild(container);
        return {
          width: widthSize,
          height: heightSize
        };
      }
      function injectScrollStyle(targetDocument, styleId2, containerClass) {
        function injectStyle(style2, method) {
          method = method || function(element) {
            targetDocument.head.appendChild(element);
          };
          var styleElement = targetDocument.createElement("style");
          styleElement.innerHTML = style2;
          styleElement.id = styleId2;
          method(styleElement);
          return styleElement;
        }
        if (!targetDocument.getElementById(styleId2)) {
          var containerAnimationClass = containerClass + "_animation";
          var containerAnimationActiveClass = containerClass + "_animation_active";
          var style = "/* Created by the element-resize-detector library. */\n";
          style += "." + containerClass + " > div::-webkit-scrollbar { " + buildCssTextString(["display: none"]) + " }\n\n";
          style += "." + containerAnimationActiveClass + " { " + buildCssTextString(["-webkit-animation-duration: 0.1s", "animation-duration: 0.1s", "-webkit-animation-name: " + containerAnimationClass, "animation-name: " + containerAnimationClass]) + " }\n";
          style += "@-webkit-keyframes " + containerAnimationClass + " { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } }\n";
          style += "@keyframes " + containerAnimationClass + " { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } }";
          injectStyle(style);
        }
      }
      function addAnimationClass(element) {
        element.className += " " + detectionContainerClass + "_animation_active";
      }
      function addEvent(el, name, cb) {
        if (el.addEventListener) {
          el.addEventListener(name, cb);
        } else if (el.attachEvent) {
          el.attachEvent("on" + name, cb);
        } else {
          return reporter.error("[scroll] Don't know how to add event listeners.");
        }
      }
      function removeEvent(el, name, cb) {
        if (el.removeEventListener) {
          el.removeEventListener(name, cb);
        } else if (el.detachEvent) {
          el.detachEvent("on" + name, cb);
        } else {
          return reporter.error("[scroll] Don't know how to remove event listeners.");
        }
      }
      function getExpandElement(element) {
        return getState(element).container.childNodes[0].childNodes[0].childNodes[0];
      }
      function getShrinkElement(element) {
        return getState(element).container.childNodes[0].childNodes[0].childNodes[1];
      }
      function addListener(element, listener) {
        var listeners = getState(element).listeners;
        if (!listeners.push) {
          throw new Error("Cannot add listener to an element that is not detectable.");
        }
        getState(element).listeners.push(listener);
      }
      function makeDetectable(options2, element, callback) {
        if (!callback) {
          callback = element;
          element = options2;
          options2 = null;
        }
        options2 = options2 || {};
        function debug() {
          if (options2.debug) {
            var args = Array.prototype.slice.call(arguments);
            args.unshift(idHandler.get(element), "Scroll: ");
            if (reporter.log.apply) {
              reporter.log.apply(null, args);
            } else {
              for (var i = 0; i < args.length; i++) {
                reporter.log(args[i]);
              }
            }
          }
        }
        function isDetached(element2) {
          function isInDocument(element3) {
            var isInShadowRoot = element3.getRootNode && element3.getRootNode().contains(element3);
            return element3 === element3.ownerDocument.body || element3.ownerDocument.body.contains(element3) || isInShadowRoot;
          }
          if (!isInDocument(element2)) {
            return true;
          }
          if (window.getComputedStyle(element2) === null) {
            return true;
          }
          return false;
        }
        function isUnrendered(element2) {
          var container = getState(element2).container.childNodes[0];
          var style = window.getComputedStyle(container);
          return !style.width || style.width.indexOf("px") === -1;
        }
        function getStyle() {
          var elementStyle = window.getComputedStyle(element);
          var style = {};
          style.position = elementStyle.position;
          style.width = element.offsetWidth;
          style.height = element.offsetHeight;
          style.top = elementStyle.top;
          style.right = elementStyle.right;
          style.bottom = elementStyle.bottom;
          style.left = elementStyle.left;
          style.widthCSS = elementStyle.width;
          style.heightCSS = elementStyle.height;
          return style;
        }
        function storeStartSize() {
          var style = getStyle();
          getState(element).startSize = {
            width: style.width,
            height: style.height
          };
          debug("Element start size", getState(element).startSize);
        }
        function initListeners() {
          getState(element).listeners = [];
        }
        function storeStyle() {
          debug("storeStyle invoked.");
          if (!getState(element)) {
            debug("Aborting because element has been uninstalled");
            return;
          }
          var style = getStyle();
          getState(element).style = style;
        }
        function storeCurrentSize(element2, width, height) {
          getState(element2).lastWidth = width;
          getState(element2).lastHeight = height;
        }
        function getExpandChildElement(element2) {
          return getExpandElement(element2).childNodes[0];
        }
        function getWidthOffset() {
          return 2 * scrollbarSizes.width + 1;
        }
        function getHeightOffset() {
          return 2 * scrollbarSizes.height + 1;
        }
        function getExpandWidth(width) {
          return width + 10 + getWidthOffset();
        }
        function getExpandHeight(height) {
          return height + 10 + getHeightOffset();
        }
        function getShrinkWidth(width) {
          return width * 2 + getWidthOffset();
        }
        function getShrinkHeight(height) {
          return height * 2 + getHeightOffset();
        }
        function positionScrollbars(element2, width, height) {
          var expand = getExpandElement(element2);
          var shrink = getShrinkElement(element2);
          var expandWidth = getExpandWidth(width);
          var expandHeight = getExpandHeight(height);
          var shrinkWidth = getShrinkWidth(width);
          var shrinkHeight = getShrinkHeight(height);
          expand.scrollLeft = expandWidth;
          expand.scrollTop = expandHeight;
          shrink.scrollLeft = shrinkWidth;
          shrink.scrollTop = shrinkHeight;
        }
        function injectContainerElement() {
          var container = getState(element).container;
          if (!container) {
            container = document.createElement("div");
            container.className = detectionContainerClass;
            container.style.cssText = buildCssTextString(["visibility: hidden", "display: inline", "width: 0px", "height: 0px", "z-index: -1", "overflow: hidden", "margin: 0", "padding: 0"]);
            getState(element).container = container;
            addAnimationClass(container);
            element.appendChild(container);
            var onAnimationStart = function() {
              getState(element).onRendered && getState(element).onRendered();
            };
            addEvent(container, "animationstart", onAnimationStart);
            getState(element).onAnimationStart = onAnimationStart;
          }
          return container;
        }
        function injectScrollElements() {
          function alterPositionStyles() {
            var style = getState(element).style;
            if (style.position === "static") {
              element.style.setProperty("position", "relative", options2.important ? "important" : "");
              var removeRelativeStyles = function(reporter2, element2, style2, property) {
                function getNumericalValue(value2) {
                  return value2.replace(/[^-\d\.]/g, "");
                }
                var value = style2[property];
                if (value !== "auto" && getNumericalValue(value) !== "0") {
                  reporter2.warn("An element that is positioned static has style." + property + "=" + value + " which is ignored due to the static positioning. The element will need to be positioned relative, so the style." + property + " will be set to 0. Element: ", element2);
                  element2.style[property] = 0;
                }
              };
              removeRelativeStyles(reporter, element, style, "top");
              removeRelativeStyles(reporter, element, style, "right");
              removeRelativeStyles(reporter, element, style, "bottom");
              removeRelativeStyles(reporter, element, style, "left");
            }
          }
          function getLeftTopBottomRightCssText(left, top, bottom, right) {
            left = !left ? "0" : left + "px";
            top = !top ? "0" : top + "px";
            bottom = !bottom ? "0" : bottom + "px";
            right = !right ? "0" : right + "px";
            return ["left: " + left, "top: " + top, "right: " + right, "bottom: " + bottom];
          }
          debug("Injecting elements");
          if (!getState(element)) {
            debug("Aborting because element has been uninstalled");
            return;
          }
          alterPositionStyles();
          var rootContainer = getState(element).container;
          if (!rootContainer) {
            rootContainer = injectContainerElement();
          }
          var scrollbarWidth = scrollbarSizes.width;
          var scrollbarHeight = scrollbarSizes.height;
          var containerContainerStyle = buildCssTextString(["position: absolute", "flex: none", "overflow: hidden", "z-index: -1", "visibility: hidden", "width: 100%", "height: 100%", "left: 0px", "top: 0px"]);
          var containerStyle = buildCssTextString(["position: absolute", "flex: none", "overflow: hidden", "z-index: -1", "visibility: hidden"].concat(getLeftTopBottomRightCssText(-(1 + scrollbarWidth), -(1 + scrollbarHeight), -scrollbarHeight, -scrollbarWidth)));
          var expandStyle = buildCssTextString(["position: absolute", "flex: none", "overflow: scroll", "z-index: -1", "visibility: hidden", "width: 100%", "height: 100%"]);
          var shrinkStyle = buildCssTextString(["position: absolute", "flex: none", "overflow: scroll", "z-index: -1", "visibility: hidden", "width: 100%", "height: 100%"]);
          var expandChildStyle = buildCssTextString(["position: absolute", "left: 0", "top: 0"]);
          var shrinkChildStyle = buildCssTextString(["position: absolute", "width: 200%", "height: 200%"]);
          var containerContainer = document.createElement("div");
          var container = document.createElement("div");
          var expand = document.createElement("div");
          var expandChild = document.createElement("div");
          var shrink = document.createElement("div");
          var shrinkChild = document.createElement("div");
          containerContainer.dir = "ltr";
          containerContainer.style.cssText = containerContainerStyle;
          containerContainer.className = detectionContainerClass;
          container.className = detectionContainerClass;
          container.style.cssText = containerStyle;
          expand.style.cssText = expandStyle;
          expandChild.style.cssText = expandChildStyle;
          shrink.style.cssText = shrinkStyle;
          shrinkChild.style.cssText = shrinkChildStyle;
          expand.appendChild(expandChild);
          shrink.appendChild(shrinkChild);
          container.appendChild(expand);
          container.appendChild(shrink);
          containerContainer.appendChild(container);
          rootContainer.appendChild(containerContainer);
          function onExpandScroll() {
            var state = getState(element);
            if (state && state.onExpand) {
              state.onExpand();
            } else {
              debug("Aborting expand scroll handler: element has been uninstalled");
            }
          }
          function onShrinkScroll() {
            var state = getState(element);
            if (state && state.onShrink) {
              state.onShrink();
            } else {
              debug("Aborting shrink scroll handler: element has been uninstalled");
            }
          }
          addEvent(expand, "scroll", onExpandScroll);
          addEvent(shrink, "scroll", onShrinkScroll);
          getState(element).onExpandScroll = onExpandScroll;
          getState(element).onShrinkScroll = onShrinkScroll;
        }
        function registerListenersAndPositionElements() {
          function updateChildSizes(element2, width, height) {
            var expandChild = getExpandChildElement(element2);
            var expandWidth = getExpandWidth(width);
            var expandHeight = getExpandHeight(height);
            expandChild.style.setProperty("width", expandWidth + "px", options2.important ? "important" : "");
            expandChild.style.setProperty("height", expandHeight + "px", options2.important ? "important" : "");
          }
          function updateDetectorElements(done) {
            var width = element.offsetWidth;
            var height = element.offsetHeight;
            var sizeChanged = width !== getState(element).lastWidth || height !== getState(element).lastHeight;
            debug("Storing current size", width, height);
            storeCurrentSize(element, width, height);
            batchProcessor.add(0, function performUpdateChildSizes() {
              if (!sizeChanged) {
                return;
              }
              if (!getState(element)) {
                debug("Aborting because element has been uninstalled");
                return;
              }
              if (!areElementsInjected()) {
                debug("Aborting because element container has not been initialized");
                return;
              }
              if (options2.debug) {
                var w = element.offsetWidth;
                var h = element.offsetHeight;
                if (w !== width || h !== height) {
                  reporter.warn(idHandler.get(element), "Scroll: Size changed before updating detector elements.");
                }
              }
              updateChildSizes(element, width, height);
            });
            batchProcessor.add(1, function updateScrollbars() {
              if (!getState(element)) {
                debug("Aborting because element has been uninstalled");
                return;
              }
              if (!areElementsInjected()) {
                debug("Aborting because element container has not been initialized");
                return;
              }
              positionScrollbars(element, width, height);
            });
            if (sizeChanged && done) {
              batchProcessor.add(2, function() {
                if (!getState(element)) {
                  debug("Aborting because element has been uninstalled");
                  return;
                }
                if (!areElementsInjected()) {
                  debug("Aborting because element container has not been initialized");
                  return;
                }
                done();
              });
            }
          }
          function areElementsInjected() {
            return !!getState(element).container;
          }
          function notifyListenersIfNeeded() {
            function isFirstNotify() {
              return getState(element).lastNotifiedWidth === void 0;
            }
            debug("notifyListenersIfNeeded invoked");
            var state = getState(element);
            if (isFirstNotify() && state.lastWidth === state.startSize.width && state.lastHeight === state.startSize.height) {
              return debug("Not notifying: Size is the same as the start size, and there has been no notification yet.");
            }
            if (state.lastWidth === state.lastNotifiedWidth && state.lastHeight === state.lastNotifiedHeight) {
              return debug("Not notifying: Size already notified");
            }
            debug("Current size not notified, notifying...");
            state.lastNotifiedWidth = state.lastWidth;
            state.lastNotifiedHeight = state.lastHeight;
            forEach(getState(element).listeners, function(listener) {
              listener(element);
            });
          }
          function handleRender() {
            debug("startanimation triggered.");
            if (isUnrendered(element)) {
              debug("Ignoring since element is still unrendered...");
              return;
            }
            debug("Element rendered.");
            var expand = getExpandElement(element);
            var shrink = getShrinkElement(element);
            if (expand.scrollLeft === 0 || expand.scrollTop === 0 || shrink.scrollLeft === 0 || shrink.scrollTop === 0) {
              debug("Scrollbars out of sync. Updating detector elements...");
              updateDetectorElements(notifyListenersIfNeeded);
            }
          }
          function handleScroll() {
            debug("Scroll detected.");
            if (isUnrendered(element)) {
              debug("Scroll event fired while unrendered. Ignoring...");
              return;
            }
            updateDetectorElements(notifyListenersIfNeeded);
          }
          debug("registerListenersAndPositionElements invoked.");
          if (!getState(element)) {
            debug("Aborting because element has been uninstalled");
            return;
          }
          getState(element).onRendered = handleRender;
          getState(element).onExpand = handleScroll;
          getState(element).onShrink = handleScroll;
          var style = getState(element).style;
          updateChildSizes(element, style.width, style.height);
        }
        function finalizeDomMutation() {
          debug("finalizeDomMutation invoked.");
          if (!getState(element)) {
            debug("Aborting because element has been uninstalled");
            return;
          }
          var style = getState(element).style;
          storeCurrentSize(element, style.width, style.height);
          positionScrollbars(element, style.width, style.height);
        }
        function ready() {
          callback(element);
        }
        function install() {
          debug("Installing...");
          initListeners();
          storeStartSize();
          batchProcessor.add(0, storeStyle);
          batchProcessor.add(1, injectScrollElements);
          batchProcessor.add(2, registerListenersAndPositionElements);
          batchProcessor.add(3, finalizeDomMutation);
          batchProcessor.add(4, ready);
        }
        debug("Making detectable...");
        if (isDetached(element)) {
          debug("Element is detached");
          injectContainerElement();
          debug("Waiting until element is attached...");
          getState(element).onRendered = function() {
            debug("Element is now attached");
            install();
          };
        } else {
          install();
        }
      }
      function uninstall(element) {
        var state = getState(element);
        if (!state) {
          return;
        }
        state.onExpandScroll && removeEvent(getExpandElement(element), "scroll", state.onExpandScroll);
        state.onShrinkScroll && removeEvent(getShrinkElement(element), "scroll", state.onShrinkScroll);
        state.onAnimationStart && removeEvent(state.container, "animationstart", state.onAnimationStart);
        state.container && element.removeChild(state.container);
      }
      return {
        makeDetectable,
        addListener,
        uninstall,
        initDocument
      };
    };
  }
});

// node_modules/element-resize-detector/src/element-resize-detector.js
var require_element_resize_detector = __commonJS({
  "node_modules/element-resize-detector/src/element-resize-detector.js"(exports, module) {
    "use strict";
    var forEach = require_collection_utils().forEach;
    var elementUtilsMaker = require_element_utils();
    var listenerHandlerMaker = require_listener_handler();
    var idGeneratorMaker = require_id_generator();
    var idHandlerMaker = require_id_handler();
    var reporterMaker = require_reporter();
    var browserDetector = require_browser_detector();
    var batchProcessorMaker = require_batch_processor();
    var stateHandler = require_state_handler();
    var objectStrategyMaker = require_object();
    var scrollStrategyMaker = require_scroll();
    function isCollection(obj) {
      return Array.isArray(obj) || obj.length !== void 0;
    }
    function toArray(collection) {
      if (!Array.isArray(collection)) {
        var array = [];
        forEach(collection, function(obj) {
          array.push(obj);
        });
        return array;
      } else {
        return collection;
      }
    }
    function isElement(obj) {
      return obj && obj.nodeType === 1;
    }
    module.exports = function(options) {
      options = options || {};
      var idHandler;
      if (options.idHandler) {
        idHandler = {
          get: function(element) {
            return options.idHandler.get(element, true);
          },
          set: options.idHandler.set
        };
      } else {
        var idGenerator = idGeneratorMaker();
        var defaultIdHandler = idHandlerMaker({
          idGenerator,
          stateHandler
        });
        idHandler = defaultIdHandler;
      }
      var reporter = options.reporter;
      if (!reporter) {
        var quiet = reporter === false;
        reporter = reporterMaker(quiet);
      }
      var batchProcessor = getOption(options, "batchProcessor", batchProcessorMaker({ reporter }));
      var globalOptions = {};
      globalOptions.callOnAdd = !!getOption(options, "callOnAdd", true);
      globalOptions.debug = !!getOption(options, "debug", false);
      var eventListenerHandler = listenerHandlerMaker(idHandler);
      var elementUtils = elementUtilsMaker({
        stateHandler
      });
      var detectionStrategy;
      var desiredStrategy = getOption(options, "strategy", "object");
      var importantCssRules = getOption(options, "important", false);
      var strategyOptions = {
        reporter,
        batchProcessor,
        stateHandler,
        idHandler,
        important: importantCssRules
      };
      if (desiredStrategy === "scroll") {
        if (browserDetector.isLegacyOpera()) {
          reporter.warn("Scroll strategy is not supported on legacy Opera. Changing to object strategy.");
          desiredStrategy = "object";
        } else if (browserDetector.isIE(9)) {
          reporter.warn("Scroll strategy is not supported on IE9. Changing to object strategy.");
          desiredStrategy = "object";
        }
      }
      if (desiredStrategy === "scroll") {
        detectionStrategy = scrollStrategyMaker(strategyOptions);
      } else if (desiredStrategy === "object") {
        detectionStrategy = objectStrategyMaker(strategyOptions);
      } else {
        throw new Error("Invalid strategy name: " + desiredStrategy);
      }
      var onReadyCallbacks = {};
      function listenTo(options2, elements, listener) {
        function onResizeCallback(element) {
          var listeners = eventListenerHandler.get(element);
          forEach(listeners, function callListenerProxy(listener2) {
            listener2(element);
          });
        }
        function addListener(callOnAdd2, element, listener2) {
          eventListenerHandler.add(element, listener2);
          if (callOnAdd2) {
            listener2(element);
          }
        }
        if (!listener) {
          listener = elements;
          elements = options2;
          options2 = {};
        }
        if (!elements) {
          throw new Error("At least one element required.");
        }
        if (!listener) {
          throw new Error("Listener required.");
        }
        if (isElement(elements)) {
          elements = [elements];
        } else if (isCollection(elements)) {
          elements = toArray(elements);
        } else {
          return reporter.error("Invalid arguments. Must be a DOM element or a collection of DOM elements.");
        }
        var elementsReady = 0;
        var callOnAdd = getOption(options2, "callOnAdd", globalOptions.callOnAdd);
        var onReadyCallback = getOption(options2, "onReady", function noop() {
        });
        var debug = getOption(options2, "debug", globalOptions.debug);
        forEach(elements, function attachListenerToElement(element) {
          if (!stateHandler.getState(element)) {
            stateHandler.initState(element);
            idHandler.set(element);
          }
          var id = idHandler.get(element);
          debug && reporter.log("Attaching listener to element", id, element);
          if (!elementUtils.isDetectable(element)) {
            debug && reporter.log(id, "Not detectable.");
            if (elementUtils.isBusy(element)) {
              debug && reporter.log(id, "System busy making it detectable");
              addListener(callOnAdd, element, listener);
              onReadyCallbacks[id] = onReadyCallbacks[id] || [];
              onReadyCallbacks[id].push(function onReady() {
                elementsReady++;
                if (elementsReady === elements.length) {
                  onReadyCallback();
                }
              });
              return;
            }
            debug && reporter.log(id, "Making detectable...");
            elementUtils.markBusy(element, true);
            return detectionStrategy.makeDetectable({ debug, important: importantCssRules }, element, function onElementDetectable(element2) {
              debug && reporter.log(id, "onElementDetectable");
              if (stateHandler.getState(element2)) {
                elementUtils.markAsDetectable(element2);
                elementUtils.markBusy(element2, false);
                detectionStrategy.addListener(element2, onResizeCallback);
                addListener(callOnAdd, element2, listener);
                var state = stateHandler.getState(element2);
                if (state && state.startSize) {
                  var width = element2.offsetWidth;
                  var height = element2.offsetHeight;
                  if (state.startSize.width !== width || state.startSize.height !== height) {
                    onResizeCallback(element2);
                  }
                }
                if (onReadyCallbacks[id]) {
                  forEach(onReadyCallbacks[id], function(callback) {
                    callback();
                  });
                }
              } else {
                debug && reporter.log(id, "Element uninstalled before being detectable.");
              }
              delete onReadyCallbacks[id];
              elementsReady++;
              if (elementsReady === elements.length) {
                onReadyCallback();
              }
            });
          }
          debug && reporter.log(id, "Already detecable, adding listener.");
          addListener(callOnAdd, element, listener);
          elementsReady++;
        });
        if (elementsReady === elements.length) {
          onReadyCallback();
        }
      }
      function uninstall(elements) {
        if (!elements) {
          return reporter.error("At least one element is required.");
        }
        if (isElement(elements)) {
          elements = [elements];
        } else if (isCollection(elements)) {
          elements = toArray(elements);
        } else {
          return reporter.error("Invalid arguments. Must be a DOM element or a collection of DOM elements.");
        }
        forEach(elements, function(element) {
          eventListenerHandler.removeAllListeners(element);
          detectionStrategy.uninstall(element);
          stateHandler.cleanState(element);
        });
      }
      function initDocument(targetDocument) {
        detectionStrategy.initDocument && detectionStrategy.initDocument(targetDocument);
      }
      return {
        listenTo,
        removeListener: eventListenerHandler.removeListener,
        removeAllListeners: eventListenerHandler.removeAllListeners,
        uninstall,
        initDocument
      };
    };
    function getOption(options, name, defaultValue) {
      var value = options[name];
      if ((value === void 0 || value === null) && defaultValue !== void 0) {
        return defaultValue;
      }
      return value;
    }
  }
});

// node_modules/shallowequal/index.js
var require_shallowequal = __commonJS({
  "node_modules/shallowequal/index.js"(exports, module) {
    module.exports = function shallowEqual(objA, objB, compare, compareContext) {
      var ret = compare ? compare.call(compareContext, objA, objB) : void 0;
      if (ret !== void 0) {
        return !!ret;
      }
      if (objA === objB) {
        return true;
      }
      if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
        return false;
      }
      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);
      if (keysA.length !== keysB.length) {
        return false;
      }
      var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
      for (var idx = 0; idx < keysA.length; idx++) {
        var key = keysA[idx];
        if (!bHasOwnProperty(key)) {
          return false;
        }
        var valueA = objA[key];
        var valueB = objB[key];
        ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;
        if (ret === false || ret === void 0 && valueA !== valueB) {
          return false;
        }
      }
      return true;
    };
  }
});

// node_modules/react-sizeme/dist/react-sizeme.js
var require_react_sizeme = __commonJS({
  "node_modules/react-sizeme/dist/react-sizeme.js"(exports, module) {
    var React = require_react();
    var ReactDOM = require_react_dom();
    var invariant = require_browser();
    var throttleDebounce = require_cjs();
    var createResizeDetector = require_element_resize_detector();
    var isShallowEqual = require_shallowequal();
    function _interopDefaultLegacy(e) {
      return e && typeof e === "object" && "default" in e ? e : { "default": e };
    }
    var React__default = _interopDefaultLegacy(React);
    var ReactDOM__default = _interopDefaultLegacy(ReactDOM);
    var invariant__default = _interopDefaultLegacy(invariant);
    var createResizeDetector__default = _interopDefaultLegacy(createResizeDetector);
    var isShallowEqual__default = _interopDefaultLegacy(isShallowEqual);
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _extends() {
      _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (typeof call === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized(self);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    var instances = {};
    function resizeDetector() {
      var strategy = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "scroll";
      if (!instances[strategy]) {
        instances[strategy] = createResizeDetector__default["default"]({
          strategy
        });
      }
      return instances[strategy];
    }
    var _excluded$1 = ["explicitRef", "className", "style", "size", "disablePlaceholder", "onSize"];
    var errMsg = "react-sizeme: an error occurred whilst stopping to listen to node size changes";
    var defaultConfig = {
      monitorWidth: true,
      monitorHeight: false,
      refreshRate: 16,
      refreshMode: "throttle",
      noPlaceholder: false,
      resizeDetectorStrategy: "scroll"
    };
    function getDisplayName(WrappedComponent) {
      return WrappedComponent.displayName || WrappedComponent.name || "Component";
    }
    var ReferenceWrapper = function(_Component) {
      _inherits(ReferenceWrapper2, _Component);
      var _super = _createSuper(ReferenceWrapper2);
      function ReferenceWrapper2() {
        _classCallCheck(this, ReferenceWrapper2);
        return _super.apply(this, arguments);
      }
      _createClass(ReferenceWrapper2, [{
        key: "render",
        value: function render() {
          return React.Children.only(this.props.children);
        }
      }]);
      return ReferenceWrapper2;
    }(React.Component);
    _defineProperty(ReferenceWrapper, "displayName", "SizeMeReferenceWrapper");
    function Placeholder(_ref) {
      var className = _ref.className, style = _ref.style;
      var phProps = {};
      if (!className && !style) {
        phProps.style = {
          width: "100%",
          height: "100%"
        };
      } else {
        if (className) {
          phProps.className = className;
        }
        if (style) {
          phProps.style = style;
        }
      }
      return React__default["default"].createElement("div", phProps);
    }
    Placeholder.displayName = "SizeMePlaceholder";
    var renderWrapper = function renderWrapper2(WrappedComponent) {
      function SizeMeRenderer(props) {
        var explicitRef = props.explicitRef, className = props.className, style = props.style, size = props.size, disablePlaceholder = props.disablePlaceholder;
        props.onSize;
        var restProps = _objectWithoutProperties(props, _excluded$1);
        var noSizeData = size == null || size.width == null && size.height == null;
        var renderPlaceholder = noSizeData && !disablePlaceholder;
        var renderProps = {
          className,
          style
        };
        if (size != null) {
          renderProps.size = size;
        }
        var toRender = renderPlaceholder ? React__default["default"].createElement(Placeholder, {
          className,
          style
        }) : React__default["default"].createElement(WrappedComponent, _extends({}, renderProps, restProps));
        return React__default["default"].createElement(ReferenceWrapper, {
          ref: explicitRef
        }, toRender);
      }
      SizeMeRenderer.displayName = "SizeMeRenderer(".concat(getDisplayName(WrappedComponent), ")");
      return SizeMeRenderer;
    };
    function withSize() {
      var config = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaultConfig;
      var _config$monitorWidth = config.monitorWidth, monitorWidth = _config$monitorWidth === void 0 ? defaultConfig.monitorWidth : _config$monitorWidth, _config$monitorHeight = config.monitorHeight, monitorHeight = _config$monitorHeight === void 0 ? defaultConfig.monitorHeight : _config$monitorHeight, _config$refreshRate = config.refreshRate, refreshRate = _config$refreshRate === void 0 ? defaultConfig.refreshRate : _config$refreshRate, _config$refreshMode = config.refreshMode, refreshMode = _config$refreshMode === void 0 ? defaultConfig.refreshMode : _config$refreshMode, _config$noPlaceholder = config.noPlaceholder, noPlaceholder = _config$noPlaceholder === void 0 ? defaultConfig.noPlaceholder : _config$noPlaceholder, _config$resizeDetecto = config.resizeDetectorStrategy, resizeDetectorStrategy = _config$resizeDetecto === void 0 ? defaultConfig.resizeDetectorStrategy : _config$resizeDetecto;
      invariant__default["default"](monitorWidth || monitorHeight, 'You have to monitor at least one of the width or height when using "sizeMe"');
      invariant__default["default"](refreshRate >= 16, "It is highly recommended that you don't put your refreshRate lower than 16 as this may cause layout thrashing.");
      invariant__default["default"](refreshMode === "throttle" || refreshMode === "debounce", 'The refreshMode should have a value of "throttle" or "debounce"');
      var refreshDelayStrategy = refreshMode === "throttle" ? throttleDebounce.throttle : throttleDebounce.debounce;
      return function WrapComponent(WrappedComponent) {
        var SizeMeRenderWrapper = renderWrapper(WrappedComponent);
        var SizeAwareComponent = function(_React$Component) {
          _inherits(SizeAwareComponent2, _React$Component);
          var _super2 = _createSuper(SizeAwareComponent2);
          function SizeAwareComponent2() {
            var _this;
            _classCallCheck(this, SizeAwareComponent2);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            _this = _super2.call.apply(_super2, [this].concat(args));
            _defineProperty(_assertThisInitialized(_this), "domEl", null);
            _defineProperty(_assertThisInitialized(_this), "state", {
              width: void 0,
              height: void 0
            });
            _defineProperty(_assertThisInitialized(_this), "uninstall", function() {
              if (_this.domEl) {
                try {
                  _this.detector.uninstall(_this.domEl);
                } catch (err) {
                  console.warn(errMsg);
                }
                _this.domEl = null;
              }
            });
            _defineProperty(_assertThisInitialized(_this), "determineStrategy", function(props) {
              if (props.onSize) {
                if (!_this.callbackState) {
                  _this.callbackState = _objectSpread2({}, _this.state);
                }
                _this.strategy = "callback";
              } else {
                _this.strategy = "render";
              }
            });
            _defineProperty(_assertThisInitialized(_this), "strategisedSetState", function(state) {
              if (_this.strategy === "callback") {
                _this.callbackState = state;
                _this.props.onSize(state);
              }
              _this.setState(state);
            });
            _defineProperty(_assertThisInitialized(_this), "strategisedGetState", function() {
              return _this.strategy === "callback" ? _this.callbackState : _this.state;
            });
            _defineProperty(_assertThisInitialized(_this), "refCallback", function(element) {
              _this.element = element;
            });
            _defineProperty(_assertThisInitialized(_this), "hasSizeChanged", function(current, next) {
              var c = current;
              var n = next;
              return monitorWidth && c.width !== n.width || monitorHeight && c.height !== n.height;
            });
            _defineProperty(_assertThisInitialized(_this), "checkIfSizeChanged", refreshDelayStrategy(refreshRate, function(el) {
              var _el$getBoundingClient = el.getBoundingClientRect(), width = _el$getBoundingClient.width, height = _el$getBoundingClient.height;
              var next = {
                width: monitorWidth ? width : null,
                height: monitorHeight ? height : null
              };
              if (_this.hasSizeChanged(_this.strategisedGetState(), next)) {
                _this.strategisedSetState(next);
              }
            }));
            return _this;
          }
          _createClass(SizeAwareComponent2, [{
            key: "componentDidMount",
            value: function componentDidMount() {
              this.detector = resizeDetector(resizeDetectorStrategy);
              this.determineStrategy(this.props);
              this.handleDOMNode();
            }
          }, {
            key: "componentDidUpdate",
            value: function componentDidUpdate() {
              this.determineStrategy(this.props);
              this.handleDOMNode();
            }
          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              this.hasSizeChanged = function() {
                return void 0;
              };
              this.checkIfSizeChanged = function() {
                return void 0;
              };
              this.uninstall();
            }
          }, {
            key: "handleDOMNode",
            value: function handleDOMNode() {
              var found = this.element && ReactDOM__default["default"].findDOMNode(this.element);
              if (!found) {
                this.uninstall();
                return;
              }
              if (!this.domEl) {
                this.domEl = found;
                this.detector.listenTo(this.domEl, this.checkIfSizeChanged);
              } else if (this.domEl.isSameNode && !this.domEl.isSameNode(found) || this.domEl !== found) {
                this.uninstall();
                this.domEl = found;
                this.detector.listenTo(this.domEl, this.checkIfSizeChanged);
              } else
                ;
            }
          }, {
            key: "render",
            value: function render() {
              var disablePlaceholder = withSize.enableSSRBehaviour || withSize.noPlaceholders || noPlaceholder || this.strategy === "callback";
              var size = _objectSpread2({}, this.state);
              return React__default["default"].createElement(SizeMeRenderWrapper, _extends({
                explicitRef: this.refCallback,
                size: this.strategy === "callback" ? null : size,
                disablePlaceholder
              }, this.props));
            }
          }]);
          return SizeAwareComponent2;
        }(React__default["default"].Component);
        _defineProperty(SizeAwareComponent, "displayName", "SizeMe(".concat(getDisplayName(WrappedComponent), ")"));
        SizeAwareComponent.WrappedComponent = WrappedComponent;
        return SizeAwareComponent;
      };
    }
    withSize.enableSSRBehaviour = false;
    withSize.noPlaceholders = false;
    var _excluded = ["children", "render"];
    var _excluded2 = ["children", "render"];
    var _excluded3 = ["children", "render"];
    var SizeMe = function(_Component) {
      _inherits(SizeMe2, _Component);
      var _super = _createSuper(SizeMe2);
      function SizeMe2(props) {
        var _this;
        _classCallCheck(this, SizeMe2);
        _this = _super.call(this, props);
        _defineProperty(_assertThisInitialized(_this), "createComponent", function(config) {
          _this.SizeAware = withSize(config)(function(_ref) {
            var children = _ref.children;
            return children;
          });
        });
        _defineProperty(_assertThisInitialized(_this), "onSize", function(size) {
          return _this.setState({
            size
          });
        });
        props.children;
        props.render;
        var sizeMeConfig = _objectWithoutProperties(props, _excluded);
        _this.createComponent(sizeMeConfig);
        _this.state = {
          size: {
            width: void 0,
            height: void 0
          }
        };
        return _this;
      }
      _createClass(SizeMe2, [{
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          var _this$props = this.props;
          _this$props.children;
          _this$props.render;
          var currentSizeMeConfig = _objectWithoutProperties(_this$props, _excluded2);
          prevProps.children;
          prevProps.render;
          var prevSizeMeConfig = _objectWithoutProperties(prevProps, _excluded3);
          if (!isShallowEqual__default["default"](currentSizeMeConfig, prevSizeMeConfig)) {
            this.createComponent(currentSizeMeConfig);
          }
        }
      }, {
        key: "render",
        value: function render() {
          var SizeAware = this.SizeAware;
          var render2 = this.props.children || this.props.render;
          return React__default["default"].createElement(SizeAware, {
            onSize: this.onSize
          }, render2({
            size: this.state.size
          }));
        }
      }]);
      return SizeMe2;
    }(React.Component);
    _defineProperty(SizeMe, "defaultProps", {
      children: void 0,
      render: void 0
    });
    withSize.SizeMe = SizeMe;
    withSize.withSize = withSize;
    module.exports = withSize;
  }
});
export default require_react_sizeme();
//# sourceMappingURL=react-sizeme.js.map
